var documenterSearchIndex = {"docs":
[{"location":"#BMesh.jl","page":"Home","title":"BMesh.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"*Backgound mesh for topology optimization *","category":"page"},{"location":"#Basic-types","page":"Home","title":"Basic types","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bmesh","category":"page"},{"location":"#BMesh.Bmesh","page":"Home","title":"BMesh.Bmesh","text":"Supertype for BMesh2D and BMesh3D \n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Bmesh2D","category":"page"},{"location":"#BMesh.Bmesh2D","page":"Home","title":"BMesh.Bmesh2D","text":"Basic structure for 2D meshes\n\nBmesh2D(etype::Symbol,nn::Int64,ne::Int64,coord::Matrix{Float64},connect::Matrix{Int64},\n        Lx::Float64, Ly::Float64, nx::Int64, ny::Int64)\n\nwhere:\n\netype   = :truss2D or :solid2D\nnn      = number of nodes\nne      = number of elements\ncoord   = nn x 2 matrix with nodal coordinates (x y)\nconnect = ne x {2,4} matrix with element connectivities. 2 for :truss2D and 4 for :solid2D\nLx      = horizontal (X) length (if using a rectangular domain)\nnx      = number of divisions (elements) in the horizontal direction \nLy      = vectival (Y) length (if using a rectangular domain)\nny      = number of divisions (elements) in the vertical direction\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Bmesh3D","category":"page"},{"location":"#BMesh.Bmesh3D","page":"Home","title":"BMesh.Bmesh3D","text":"Basic structure for 3D meshes\n\nBmesh3D(etype::Symbol,nn::Int64,ne::Int64,coord::Matrix{Float64},connect::Matrix{Int64},\n        Lx::Float64, Ly::Float64, Lz::Float64,nx::Int64, ny::Int64, nz::Int64)\n\nwhere:\n\netype   = :truss2D or :solid2D\nnn      = number of nodes\nne      = number of elements\ncoord   = nn x 3 matrix with nodal coordinates (x y z)\nconnect = ne x {2,8} matrix with element connectivities. 2 for :truss3D and 8 for :solid3D\nLx      = horizontal (X) length (if using a cubic domain)\nnx      = number of divisions (elements) in the horizontal X direction \nLy      = horizontal (Y) length (if using a cubic domain)\nny      = number of divisions (elements) in the horizontal Y direction \nLz      = vertical (Z) length (if using a cubic domain)\nnz      = number of divisions (elements) in the vertical direction\n\n\n\n\n\n","category":"type"},{"location":"#Mesh-generation","page":"Home","title":"Mesh generation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Bmesh_truss_2D","category":"page"},{"location":"#BMesh.Bmesh_truss_2D","page":"Home","title":"BMesh.Bmesh_truss_2D","text":"Generate a 2D background mesh for :truss2D elements\n\nBmesh_truss_2D(Lx::Float64, nx::Int64, Ly::Float64, ny::Int64;\n               origin=(0.0,0.0))\n\nwhere\n\nLx  = length in X (horizonal direction)\nnx  = number of divisions (elements) in X\nLy  = lenght in Y (vertical direction)\nny  = number of divisions (elements) in Y\norigin = coordinates of node 1\n\nreturns\n\nBmesh2D(:truss2D,nn,ne,coord,connect,Lx,Ly, nx,ny)\n\nwhere\n\nnn      = number of nodes \nne      = number of elements\ncoord   = matrix nn x 2 with nodal coordinates (x y) \nconnect = matrix ne x 2 with connectivities\n\nNodes are created from bottom left (0,0) to bottom right (0,Lx),row by row.  Horizontal elements are generated first, followed by vertical, diagonal / and then the other diagonals.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Bmesh_truss_3D","category":"page"},{"location":"#BMesh.Bmesh_truss_3D","page":"Home","title":"BMesh.Bmesh_truss_3D","text":"Generate a 3D background mesh for truss:3D elements\n\nBmesh_truss_3D(Lx::Float64,nx::Int64,Ly::Float64,ny::Int64,Lz::Float64,nz::Int64;\n               origin=(0.0,0.0,0.0))\n\nwhere\n\nLx  = length in X (horizonal direction)\nnx  = number of divisions (elements) in X\nLy  = length in Y (horizonal direction)\nny  = number of divisions (elements) in Y\nLz  = lenght in Z (vertical direction)\nnz  = number of divisions (elements) in Z\norigin = coordinates of node 1\n\nreturns\n\nBmesh3D(:truss3D,nn,ne,coord,connect,Lx,Ly,Lz,nx,ny,nz)\n\nwhere\n\nnn      = number of nodes \nne      = number of elements\ncoord   = matrix nn x 3 with nodal coordinates (x y z) \nconnect = matrix ne x 2 with connectivities.\n\nNodes are generated plane by plane, from z=0 to z=Lz.     Connectivities follow the same pattern.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Bmesh_solid_2D","category":"page"},{"location":"#BMesh.Bmesh_solid_2D","page":"Home","title":"BMesh.Bmesh_solid_2D","text":"Generate a 2D background mesh for 4-node solid (planar) elements (:solid2D)\n\nBmesh_solid_2D(Lx::Float64, nx::Int64, Ly::Float64, ny::Int64;\n               origin=(0.0,0.0) )\n\nwhere\n\nLx  = length in X (horizonal direction)\nnx  = number of divisions (elements) in X\nLy  = lenght in Y (vertical direction)\nny  = number of divisions (elements) in Y\norigin = coordinates of node 1\n\nreturns\n\nBmesh2D(:solid2D,nn,ne,coord,connect,Lx,Ly, nx,ny)\n\nwhere\n\nnn      = number of nodes \nne      = number of elements\ncoord   = matrix nn x 2 with nodal coordinates (x y) \nconnect = matrix ne x 4 with connectivities\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Bmesh_solid_3D","category":"page"},{"location":"#BMesh.Bmesh_solid_3D","page":"Home","title":"BMesh.Bmesh_solid_3D","text":"Generate a 3D background mesh for 8-node solid elements (:solid3D)\n\nBmesh_solid_3D(Lx::Float64,nx::Int64,Ly::Float64,ny::Int64,Lz::Float64,nz::Int64;\n               origin=(0.0,0.0,0.0))\n\nwhere\n\nLx  = length in X (horizonal direction)\nnx  = number of divisions (elements) in X\nLy  = length in Y (horizonal direction)\nny  = number of divisions (elements) in Y\nLz  = lenght in Z (vertical direction)\nnz  = number of divisions (elements) in Z\norigin = coordinates of node 1\n\nreturns\n\nBmesh3D(:solid3D,nn,ne,coord,connect,Lx,Ly,Lz,nx,ny,nz)\n\nwhere\n\nnn      = number of nodes \nne      = number of elements\ncoord   = matrix nn x 3 with nodal coordinates (x y z) \nconnect = matrix ne x 8 with connectivities.\n\nNodes are generated plane by plane, from z=0 to z=Lz.     Connectivities follow the same pattern.\n\n\n\n\n\n","category":"function"},{"location":"#Graphical-output","page":"Home","title":"Graphical output","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"BMesh.plot","category":"page"},{"location":"#RecipesBase.plot","page":"Home","title":"RecipesBase.plot","text":"Plot the background mesh (2D)\n\nplot(bmesh::Bmesh2D;  name=\"\" )\n\nA png file \"name.png\" is generated if name is not empty.\n\n\n\n\n\nPlot the background mesh (3D)\n\nplot(bmesh::Bmesh3D;  name=\"\" )\n\nA png file \"name.png\" is generated if name is not empty.\n\n\n\n\n\n","category":"function"},{"location":"#Change-of-reference-system","page":"Home","title":"Change of reference system","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Rotation","category":"page"},{"location":"#BMesh.Rotation","page":"Home","title":"BMesh.Rotation","text":"Rotation\n\nSupertype for Rotation2D and Rotation3D\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Rotation2D","category":"page"},{"location":"#BMesh.Rotation2D","page":"Home","title":"BMesh.Rotation2D","text":"Rotation2D\n\nRotation2D(bmesh::Bmesh3D, ele::Int64, α=0.0)\n\nEvaluate the director cossines for element ele.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Rotation3D","category":"page"},{"location":"#BMesh.Rotation3D","page":"Home","title":"BMesh.Rotation3D","text":"\n\nStructure containing the director cossines and length for each element\n\n\n\nRotation3D\n\nRotation3D(bmesh::Bmesh3D, ele::Int64, α=0.0)\n\nEvaluate the director cossines for element ele. α is the additional rotation for the local reference system.\n\n\n\n\n\n","category":"type"},{"location":"","page":"Home","title":"Home","text":"Rotations","category":"page"},{"location":"#BMesh.Rotations","page":"Home","title":"BMesh.Rotations","text":"Rotation\n\nRotations(bmesh::Bmesh, ele::Int64, α=0.0)\n\nGeneral driver for Rotation. It deploys the correct method for either 2D or 3D problems.\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"T_matrix","category":"page"},{"location":"#BMesh.T_matrix","page":"Home","title":"BMesh.T_matrix","text":"Evaluate the rotation matrix T that maps from global to local reference systems\n\nT_matrix(r::Rotation2D)\n\n\n\n\n\nEvaluate the rotation matrix T that maps from global to local reference systems\n\nT_matrix(r::Rotation3D)\n\n\n\n\n\nEvaluate the rotation matrix T that maps from global to local reference systems. This version evaluates Rotation internally.\n\nT_matrix(bmesh::Bmesh, ele::Int64, α=0.0)\n\n\n\n\n\n","category":"function"},{"location":"#Auxiliary-functions","page":"Home","title":"Auxiliary functions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Connect","category":"page"},{"location":"#BMesh.Connect","page":"Home","title":"BMesh.Connect","text":"Return the connectivities of element ele\n\nConnect(bmesh::Bmesh,ele::Int64)\n\nas an Int64 vector.  \n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Coord","category":"page"},{"location":"#BMesh.Coord","page":"Home","title":"BMesh.Coord","text":"Return the coordinates of node \n\nCoord(bmesh::Bmesh2D,node::Int64)\n\nas a vector [x;y]\n\n\n\n\n\nReturn the coordinates of node \n\nCoord(bmesh::Bmesh3D,node::Int64)\n\nas a vector [x;y;z]\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"Length","category":"page"},{"location":"#BMesh.Length","page":"Home","title":"BMesh.Length","text":"Return the distance between two nodes of the element\n\nLength(bmesh::Bmesh,ele::Int64;nodes=(1,2))\n\nwhere the default is the distance between (local) nodes 1 and 2\n\n\n\n\n\n","category":"function"},{"location":"","page":"Home","title":"Home","text":"DOFs","category":"page"},{"location":"#BMesh.DOFs","page":"Home","title":"BMesh.DOFs","text":"Return a 2*n vector with the global DOFs of element ele\n\nDOFs(bmesh::Bmesh2D,ele::Int64)\n\nwhere n is the number of nodes of ele.\n\n\n\n\n\nReturn a 3*n vector with the global DOFs of element ele\n\nDOFs(bmesh::Bmesh3D,ele::Int64)\n\nwhere n is the number of nodes of ele.\n\n\n\n\n\n","category":"function"}]
}
